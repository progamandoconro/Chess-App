{"ast":null,"code":"import _objectSpread from \"/home/sony/WebAdmin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { observable, computed, action, decorate, runInAction } from \"mobx\";\nimport { get, set, entries, remove } from \"mobx\";\nimport * as firebaseService from \"./firebaseService\";\nexport class Store {\n  constructor() {\n    this.handleAuthedUser = async _authUser => {\n      if (_authUser) {\n        let userAcctInfo = await firebaseService.getUserProfile();\n        console.log(\"setting active user\");\n        this.activeUser = _objectSpread({}, _authUser, userAcctInfo);\n      } else {\n        this.activeUser = _authUser;\n      }\n\n      return this.activeUser;\n    };\n\n    this.activeUser = null;\n    this.loading = false;\n    this.authCheckComplete = false;\n    this.items = new Map();\n    this.initializationError = null;\n    this.initializeStore().then(u => {\n      this.activeUser = u;\n      this.authCheckComplete = true;\n    });\n  }\n  /**\n   * if we have an authenticated user then get all of the profile\n   * information from the database and associate it with the active\n   * user\n   * @param {*} _authUser\n   */\n\n\n  /**\n   * check to see if we have a user before starting up\n   */\n  async initializeStore() {\n    return firebaseService.authCheck(this.handleAuthedUser).then(_user => {\n      return _user;\n    }).catch(e => {\n      return runInAction(() => {\n        this.initializationError = e;\n      });\n    });\n  }\n\n  get doCheckAuth() {\n    if (firebaseService.getCurrentUser()) {\n      return this.activeUser;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * here we check to see if ionic saved a user for us\n   */\n\n\n  get authenticatedUser() {\n    return this.activeUser || null;\n  }\n  /**\n   * gets all of the items as an array from the map\n   */\n\n\n  get itemEntries() {\n    return entries(this.items);\n  }\n  /**\n   * get a specific item based on its key\n   * @param {*} _key\n   */\n\n\n  itemByKey(_key) {\n    return get(this.items, _key);\n  }\n  /**\n   * login using a username and password\n   */\n\n\n  doLogin(_username, _password) {\n    debugger;\n\n    if (_username.length) {\n      return firebaseService.loginWithEmail(_username, _password).then(_result => {\n        return true;\n      }, err => {\n        console.log(err);\n        return err;\n      }).catch(e => {\n        console.log(e);\n        return e;\n      });\n    }\n  }\n  /**\n   * create the user with the information and set the user object\n   */\n\n\n  async doCreateUser(_params) {\n    try {\n      let newUser = await firebaseService.registerUser({\n        email: _params.email,\n        password: _params.password,\n        firstName: _params.firstName,\n        lastName: _params.lastName\n      });\n      return newUser;\n    } catch (err) {\n      debugger;\n      console.log(err);\n      return err; // for (let e of err.details) {\n      //   if (e === \"conflict_email\") {\n      //     alert(\"Email already exists.\");\n      //   } else {\n      //     // handle other errors\n      //   }\n      // }\n    }\n  }\n  /**\n   * logout and remove the user...\n   */\n\n\n  doLogout() {\n    this.activeUser = null;\n    return firebaseService.logOut();\n  } // DATA CRUD\n\n\n  loadData() {\n    return firebaseService.queryObjectCollection({\n      collection: \"items\"\n    }).then(_result => {\n      // create the user object based on the data retrieved...\n      return runInAction(() => {\n        let resultMap = _result.reduce((map, obj) => {\n          map[obj.id] = obj;\n          return map;\n        }, {});\n\n        this.items = resultMap;\n        return resultMap;\n      });\n    }, err => {\n      console.log(err);\n      return err;\n    }).catch(e => {\n      console.log(e);\n      return e;\n    });\n  }\n\n  addItem(_data) {\n    return firebaseService.addObjectToCollection({\n      collection: \"items\",\n      objectData: _data\n    }).then(_result => {\n      // create the user object based on the data retrieved...\n      return runInAction(() => {\n        set(this.items, _result.id, _result);\n        return _result;\n      });\n    }, err => {\n      console.log(err);\n      return err;\n    }).catch(e => {\n      console.log(e);\n      return e;\n    });\n  }\n\n  deleteItem(_data) {\n    return firebaseService.removeObjectFromCollection({\n      collection: \"items\",\n      objectId: _data.id\n    }).then(_result => {\n      // create the user object based on the data retrieved...\n      return runInAction(() => {\n        remove(this.items, _data.id);\n        return true;\n      });\n    }, err => {\n      console.log(err);\n      return err;\n    }).catch(e => {\n      console.log(e);\n      return e;\n    });\n  }\n\n}\ndecorate(Store, {\n  // OBSERVABLES\n  activeUser: observable,\n  loading: observable,\n  authCheckComplete: observable,\n  items: observable,\n  initializationError: observable,\n  // COMPUTED\n  authenticatedUser: computed,\n  doCheckAuth: computed,\n  itemEntries: computed,\n  // ACTIONS\n  doCreateUser: action,\n  doLogin: action,\n  doLogout: action,\n  loadData: action,\n  itemByKey: action,\n  addItem: action,\n  deleteItem: action\n});","map":{"version":3,"sources":["/home/sony/WebAdmin/src/store/index.js"],"names":["observable","computed","action","decorate","runInAction","get","set","entries","remove","firebaseService","Store","constructor","handleAuthedUser","_authUser","userAcctInfo","getUserProfile","console","log","activeUser","loading","authCheckComplete","items","Map","initializationError","initializeStore","then","u","authCheck","_user","catch","e","doCheckAuth","getCurrentUser","authenticatedUser","itemEntries","itemByKey","_key","doLogin","_username","_password","length","loginWithEmail","_result","err","doCreateUser","_params","newUser","registerUser","email","password","firstName","lastName","doLogout","logOut","loadData","queryObjectCollection","collection","resultMap","reduce","map","obj","id","addItem","_data","addObjectToCollection","objectData","deleteItem","removeObjectFromCollection","objectId"],"mappings":"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","sourcesContent":["import { observable, computed, action, decorate, runInAction } from \"mobx\";\nimport { get, set, entries, remove } from \"mobx\";\nimport * as firebaseService from \"./firebaseService\";\n\nexport class Store {\n  constructor() {\n    this.activeUser = null;\n    this.loading = false;\n    this.authCheckComplete = false;\n    this.items = new Map();\n    this.initializationError = null;\n\n    this.initializeStore().then(u => {\n      this.activeUser = u;\n      this.authCheckComplete = true;\n    });\n  }\n\n  /**\n   * if we have an authenticated user then get all of the profile\n   * information from the database and associate it with the active\n   * user\n   * @param {*} _authUser\n   */\n  handleAuthedUser = async _authUser => {\n    if (_authUser) {\n      let userAcctInfo = await firebaseService.getUserProfile();\n      console.log(\"setting active user\");\n      this.activeUser = { ..._authUser, ...userAcctInfo };\n    } else {\n      this.activeUser = _authUser;\n    }\n    return this.activeUser;\n  };\n\n  /**\n   * check to see if we have a user before starting up\n   */\n  async initializeStore() {\n    return firebaseService\n      .authCheck(this.handleAuthedUser)\n      .then(_user => {\n        return _user;\n      })\n      .catch(e => {\n        return runInAction(() => {\n          this.initializationError = e;\n        });\n      });\n  }\n\n  get doCheckAuth() {\n    if (firebaseService.getCurrentUser()) {\n      return this.activeUser;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * here we check to see if ionic saved a user for us\n   */\n  get authenticatedUser() {\n    return this.activeUser || null;\n  }\n\n  /**\n   * gets all of the items as an array from the map\n   */\n  get itemEntries() {\n    return entries(this.items);\n  }\n\n  /**\n   * get a specific item based on its key\n   * @param {*} _key\n   */\n  itemByKey(_key) {\n    return get(this.items, _key);\n  }\n\n  /**\n   * login using a username and password\n   */\n  doLogin(_username, _password) {\n    debugger;\n    if (_username.length) {\n      return firebaseService\n        .loginWithEmail(_username, _password)\n        .then(\n          _result => {\n            return true;\n          },\n          err => {\n            console.log(err);\n            return err;\n          }\n        )\n        .catch(e => {\n          console.log(e);\n          return e;\n        });\n    }\n  }\n\n  /**\n   * create the user with the information and set the user object\n   */\n  async doCreateUser(_params) {\n    try {\n      let newUser = await firebaseService.registerUser({\n        email: _params.email,\n        password: _params.password,\n        firstName: _params.firstName,\n        lastName: _params.lastName\n      });\n      return newUser;\n    } catch (err) {\n      debugger;\n      console.log(err);\n      return err;\n      // for (let e of err.details) {\n      //   if (e === \"conflict_email\") {\n      //     alert(\"Email already exists.\");\n      //   } else {\n      //     // handle other errors\n      //   }\n      // }\n    }\n  }\n\n  /**\n   * logout and remove the user...\n   */\n  doLogout() {\n    this.activeUser = null;\n    return firebaseService.logOut();\n  }\n\n  // DATA CRUD\n  loadData() {\n    return firebaseService\n      .queryObjectCollection({ collection: \"items\" })\n      .then(\n        _result => {\n          // create the user object based on the data retrieved...\n          return runInAction(() => {\n            let resultMap = _result.reduce((map, obj) => {\n              map[obj.id] = obj;\n              return map;\n            }, {});\n            this.items = resultMap;\n            return resultMap;\n          });\n        },\n        err => {\n          console.log(err);\n          return err;\n        }\n      )\n      .catch(e => {\n        console.log(e);\n        return e;\n      });\n  }\n  addItem(_data) {\n    return firebaseService\n      .addObjectToCollection({ collection: \"items\", objectData: _data })\n      .then(\n        _result => {\n          // create the user object based on the data retrieved...\n          return runInAction(() => {\n            set(this.items, _result.id, _result);\n            return _result;\n          });\n        },\n        err => {\n          console.log(err);\n          return err;\n        }\n      )\n      .catch(e => {\n        console.log(e);\n        return e;\n      });\n  }\n\n  deleteItem(_data) {\n    return firebaseService\n      .removeObjectFromCollection({ collection: \"items\", objectId: _data.id })\n      .then(\n        _result => {\n          // create the user object based on the data retrieved...\n          return runInAction(() => {\n            remove(this.items, _data.id);\n            return true;\n          });\n        },\n        err => {\n          console.log(err);\n          return err;\n        }\n      )\n      .catch(e => {\n        console.log(e);\n        return e;\n      });\n  }\n}\n\ndecorate(Store, {\n  // OBSERVABLES\n  activeUser: observable,\n  loading: observable,\n  authCheckComplete: observable,\n  items: observable,\n  initializationError: observable,\n\n  // COMPUTED\n  authenticatedUser: computed,\n  doCheckAuth: computed,\n  itemEntries: computed,\n\n  // ACTIONS\n  doCreateUser: action,\n  doLogin: action,\n  doLogout: action,\n  loadData: action,\n  itemByKey: action,\n  addItem: action,\n  deleteItem: action\n});\n"]},"metadata":{},"sourceType":"module"}