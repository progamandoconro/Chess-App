{"ast":null,"code":"import { r as registerInstance, c as createEvent, d as getIonMode, h, H as Host, e as getElement } from './chunk-d0403a2f.js';\nimport './chunk-1074393c.js';\nimport { c as createColorClasses, h as hostContext } from './chunk-353a032e.js';\nimport { f as findItemLabel } from './chunk-c90aaa66.js';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\n\nvar Radio =\n/** @class */\nfunction () {\n  function Radio(hostRef) {\n    var _this = this;\n\n    registerInstance(this, hostRef);\n    this.inputId = \"ion-rb-\" + radioButtonIds++;\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n\n    this.name = this.inputId;\n    /**\n     * If `true`, the user cannot interact with the radio.\n     */\n\n    this.disabled = false;\n    /**\n     * If `true`, the radio is selected.\n     */\n\n    this.checked = false;\n\n    this.onFocus = function () {\n      _this.ionFocus.emit();\n    };\n\n    this.onBlur = function () {\n      _this.ionBlur.emit();\n    };\n\n    this.onClick = function () {\n      if (_this.checked) {\n        _this.ionDeselect.emit();\n      } else {\n        _this.checked = true;\n      }\n    };\n\n    this.ionRadioDidLoad = createEvent(this, \"ionRadioDidLoad\", 7);\n    this.ionRadioDidUnload = createEvent(this, \"ionRadioDidUnload\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.ionSelect = createEvent(this, \"ionSelect\", 7);\n    this.ionDeselect = createEvent(this, \"ionDeselect\", 7);\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\n  }\n\n  Radio.prototype.colorChanged = function () {\n    this.emitStyle();\n  };\n\n  Radio.prototype.checkedChanged = function (isChecked) {\n    if (isChecked) {\n      this.ionSelect.emit({\n        checked: true,\n        value: this.value\n      });\n    }\n\n    this.emitStyle();\n  };\n\n  Radio.prototype.disabledChanged = function () {\n    this.emitStyle();\n  };\n\n  Radio.prototype.componentWillLoad = function () {\n    if (this.value === undefined) {\n      this.value = this.inputId;\n    }\n\n    this.emitStyle();\n  };\n\n  Radio.prototype.componentDidLoad = function () {\n    this.ionRadioDidLoad.emit();\n  };\n\n  Radio.prototype.componentDidUnload = function () {\n    this.ionRadioDidUnload.emit();\n  };\n\n  Radio.prototype.emitStyle = function () {\n    this.ionStyle.emit({\n      'radio-checked': this.checked,\n      'interactive-disabled': this.disabled\n    });\n  };\n\n  Radio.prototype.render = function () {\n    var _a;\n\n    var _b = this,\n        inputId = _b.inputId,\n        disabled = _b.disabled,\n        checked = _b.checked,\n        color = _b.color,\n        el = _b.el;\n\n    var mode = getIonMode(this);\n    var labelId = inputId + '-lbl';\n    var label = findItemLabel(el);\n\n    if (label) {\n      label.id = labelId;\n    }\n\n    return h(Host, {\n      onClick: this.onClick,\n      role: \"radio\",\n      \"aria-disabled\": disabled ? 'true' : null,\n      \"aria-checked\": \"\" + checked,\n      \"aria-labelledby\": labelId,\n      class: Object.assign({}, createColorClasses(color), (_a = {}, _a[mode] = true, _a['in-item'] = hostContext('ion-item', el), _a['interactive'] = true, _a['radio-checked'] = checked, _a['radio-disabled'] = disabled, _a))\n    }, h(\"div\", {\n      class: \"radio-icon\"\n    }, h(\"div\", {\n      class: \"radio-inner\"\n    })), h(\"button\", {\n      type: \"button\",\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      disabled: disabled\n    }));\n  };\n\n  Object.defineProperty(Radio.prototype, \"el\", {\n    get: function get() {\n      return getElement(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Radio, \"watchers\", {\n    get: function get() {\n      return {\n        \"color\": [\"colorChanged\"],\n        \"checked\": [\"checkedChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Radio, \"style\", {\n    get: function get() {\n      return \":host{display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;contain:layout size style}.radio-icon,button{width:100%;height:100%}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}:host-context([dir=rtl]) button,[dir=rtl] button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}:host{--color-checked:var(--ion-color-primary,#3880ff);width:15px;height:24px}:host(.ion-color.radio-checked) .radio-inner{border-color:var(--ion-color-base)}.item-radio.item-ios ion-label{margin-left:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.item-radio.item-ios ion-label{margin-left:unset;-webkit-margin-start:0;margin-inline-start:0}}.radio-inner{width:33%;height:50%}:host(.radio-checked) .radio-inner{-webkit-transform:rotate(45deg);transform:rotate(45deg);border-width:2px;border-top-width:0;border-left-width:0;border-style:solid;border-color:var(--color-checked)}:host(.radio-disabled){opacity:.3}:host(.ion-focused) .radio-icon:after{border-radius:50%;left:-9px;top:-8px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint,#4c8dff);content:\\\"\\\";opacity:.2}:host-context([dir=rtl]).ion-focused .radio-icon:after,:host-context([dir=rtl]):host(.ion-focused) .radio-icon:after{left:unset;right:unset;right:-9px}:host(.in-item){margin-left:8px;margin-right:11px;margin-top:8px;margin-bottom:8px;display:block;position:static}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:8px;margin-inline-start:8px;-webkit-margin-end:11px;margin-inline-end:11px}}:host(.in-item[slot=start]){margin-left:3px;margin-right:21px;margin-top:8px;margin-bottom:8px}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:3px;margin-inline-start:3px;-webkit-margin-end:21px;margin-inline-end:21px}}\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Radio;\n}();\n\nvar radioButtonIds = 0;\n\nvar RadioGroup =\n/** @class */\nfunction () {\n  function RadioGroup(hostRef) {\n    registerInstance(this, hostRef);\n    this.inputId = \"ion-rg-\" + radioGroupIds++;\n    this.labelId = this.inputId + \"-lbl\";\n    this.radios = [];\n    /**\n     * If `true`, the radios can be deselected.\n     */\n\n    this.allowEmptySelection = false;\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n\n    this.name = this.inputId;\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n  }\n\n  RadioGroup.prototype.valueChanged = function (value) {\n    this.updateRadios();\n    this.ionChange.emit({\n      value: value\n    });\n  };\n\n  RadioGroup.prototype.onRadioDidLoad = function (ev) {\n    var radio = ev.target;\n    radio.name = this.name; // add radio to internal list\n\n    this.radios.push(radio); // this radio-group does not have a value\n    // but this radio is checked, so let's set the\n    // radio-group's value from the checked radio\n\n    if (this.value == null && radio.checked) {\n      this.value = radio.value;\n    } else {\n      this.updateRadios();\n    }\n  };\n\n  RadioGroup.prototype.onRadioDidUnload = function (ev) {\n    var index = this.radios.indexOf(ev.target);\n\n    if (index > -1) {\n      this.radios.splice(index, 1);\n    }\n  };\n\n  RadioGroup.prototype.onRadioSelect = function (ev) {\n    var selectedRadio = ev.target;\n\n    if (selectedRadio) {\n      this.value = selectedRadio.value;\n    }\n  };\n\n  RadioGroup.prototype.onRadioDeselect = function (ev) {\n    if (this.allowEmptySelection) {\n      var selectedRadio = ev.target;\n\n      if (selectedRadio) {\n        selectedRadio.checked = false;\n        this.value = undefined;\n      }\n    }\n  };\n\n  RadioGroup.prototype.componentDidLoad = function () {\n    // Get the list header if it exists and set the id\n    // this is used to set aria-labelledby\n    var header = this.el.querySelector('ion-list-header');\n\n    if (!header) {\n      header = this.el.querySelector('ion-item-divider');\n    }\n\n    if (header) {\n      var label = header.querySelector('ion-label');\n\n      if (label) {\n        this.labelId = label.id = this.name + '-lbl';\n      }\n    }\n\n    this.updateRadios();\n  };\n\n  RadioGroup.prototype.updateRadios = function () {\n    var value = this.value;\n    var hasChecked = false;\n\n    for (var _i = 0, _a = this.radios; _i < _a.length; _i++) {\n      var radio = _a[_i];\n\n      if (!hasChecked && radio.value === value) {\n        // correct value for this radio\n        // but this radio isn't checked yet\n        // and we haven't found a checked yet\n        hasChecked = true;\n        radio.checked = true;\n      } else {\n        // this radio doesn't have the correct value\n        // or the radio group has been already checked\n        radio.checked = false;\n      }\n    }\n  };\n\n  RadioGroup.prototype.render = function () {\n    return h(Host, {\n      role: \"radiogroup\",\n      \"aria-labelledby\": this.labelId,\n      class: getIonMode(this)\n    });\n  };\n\n  Object.defineProperty(RadioGroup.prototype, \"el\", {\n    get: function get() {\n      return getElement(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadioGroup, \"watchers\", {\n    get: function get() {\n      return {\n        \"value\": [\"valueChanged\"]\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RadioGroup;\n}();\n\nvar radioGroupIds = 0;\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };","map":null,"metadata":{},"sourceType":"module"}