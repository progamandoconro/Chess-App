{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { r as registerInstance, c as createEvent, d as getIonMode, h, H as Host, e as getElement } from './chunk-d0403a2f.js';\nimport './chunk-1074393c.js';\nimport { c as popoverController, b as actionSheetController, a as alertController, s as safeCall } from './chunk-d83bfeae.js';\nimport { h as hostContext } from './chunk-353a032e.js';\nimport { f as findItemLabel, r as renderHiddenInput } from './chunk-c90aaa66.js';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\n\nvar Select =\n/** @class */\nfunction () {\n  function Select(hostRef) {\n    var _this = this;\n\n    registerInstance(this, hostRef);\n    this.childOpts = [];\n    this.inputId = \"ion-sel-\" + selectIds++;\n    this.didInit = false;\n    this.isExpanded = false;\n    /**\n     * If `true`, the user cannot interact with the select.\n     */\n\n    this.disabled = false;\n    /**\n     * The text to display on the cancel button.\n     */\n\n    this.cancelText = 'Cancel';\n    /**\n     * The text to display on the ok button.\n     */\n\n    this.okText = 'OK';\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n\n    this.name = this.inputId;\n    /**\n     * If `true`, the select can accept multiple values.\n     */\n\n    this.multiple = false;\n    /**\n     * The interface the select should use: `action-sheet`, `popover` or `alert`.\n     */\n\n    this.interface = 'alert';\n    /**\n     * Any additional options that the `alert`, `action-sheet` or `popover` interface\n     * can take. See the [AlertController API docs](../../alert/AlertController/#create), the\n     * [ActionSheetController API docs](../../action-sheet/ActionSheetController/#create) and the\n     * [PopoverController API docs](../../popover/PopoverController/#create) for the\n     * create options for each interface.\n     */\n\n    this.interfaceOptions = {};\n\n    this.onClick = function (ev) {\n      _this.setFocus();\n\n      _this.open(ev);\n    };\n\n    this.onFocus = function () {\n      _this.ionFocus.emit();\n    };\n\n    this.onBlur = function () {\n      _this.ionBlur.emit();\n    };\n\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionCancel = createEvent(this, \"ionCancel\", 7);\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n  }\n\n  Select.prototype.disabledChanged = function () {\n    this.emitStyle();\n  };\n\n  Select.prototype.valueChanged = function () {\n    if (this.didInit) {\n      this.updateOptions();\n      this.ionChange.emit({\n        value: this.value\n      });\n      this.emitStyle();\n    }\n  };\n\n  Select.prototype.selectOptionChanged = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.loadOptions()];\n\n          case 1:\n            _a.sent();\n\n            if (this.didInit) {\n              this.updateOptions();\n              this.updateOverlayOptions();\n              this.emitStyle();\n              /**\n               * In the event that options\n               * are not loaded at component load\n               * this ensures that any value that is\n               * set is properly rendered once\n               * options have been loaded\n               */\n\n              if (this.value !== undefined) {\n                this.el.forceUpdate();\n              }\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Select.prototype.componentDidLoad = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var checked, checked;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.loadOptions()];\n\n          case 1:\n            _a.sent();\n\n            if (this.value === undefined) {\n              if (this.multiple) {\n                checked = this.childOpts.filter(function (o) {\n                  return o.selected;\n                });\n                this.value = checked.map(function (o) {\n                  return o.value;\n                });\n              } else {\n                checked = this.childOpts.find(function (o) {\n                  return o.selected;\n                });\n\n                if (checked) {\n                  this.value = checked.value;\n                }\n              }\n            }\n\n            this.updateOptions();\n            this.emitStyle();\n            this.el.forceUpdate();\n            this.didInit = true;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Open the select overlay. The overlay is either an alert, action sheet, or popover,\n   * depending on the `interface` property on the `ion-select`.\n   *\n   * @param event The user interface event that called the open.\n   */\n\n\n  Select.prototype.open = function (event) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var overlay, _a;\n\n      var _this = this;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.disabled || this.isExpanded) {\n              return [2\n              /*return*/\n              , undefined];\n            }\n\n            _a = this;\n            return [4\n            /*yield*/\n            , this.createOverlay(event)];\n\n          case 1:\n            overlay = _a.overlay = _b.sent();\n            this.isExpanded = true;\n            overlay.onDidDismiss().then(function () {\n              _this.overlay = undefined;\n              _this.isExpanded = false;\n\n              _this.setFocus();\n            });\n            return [4\n            /*yield*/\n            , overlay.present()];\n\n          case 2:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , overlay];\n        }\n      });\n    });\n  };\n\n  Select.prototype.createOverlay = function (ev) {\n    var selectInterface = this.interface;\n\n    if ((selectInterface === 'action-sheet' || selectInterface === 'popover') && this.multiple) {\n      console.warn(\"Select interface cannot be \\\"\" + selectInterface + \"\\\" with a multi-value select. Using the \\\"alert\\\" interface instead.\");\n      selectInterface = 'alert';\n    }\n\n    if (selectInterface === 'popover' && !ev) {\n      console.warn('Select interface cannot be a \"popover\" without passing an event. Using the \"alert\" interface instead.');\n      selectInterface = 'alert';\n    }\n\n    if (selectInterface === 'popover') {\n      return this.openPopover(ev);\n    }\n\n    if (selectInterface === 'action-sheet') {\n      return this.openActionSheet();\n    }\n\n    return this.openAlert();\n  };\n\n  Select.prototype.updateOverlayOptions = function () {\n    if (!this.overlay) {\n      return;\n    }\n\n    var overlay = this.overlay;\n\n    switch (this.interface) {\n      case 'action-sheet':\n        overlay.buttons = this.createActionSheetButtons(this.childOpts);\n        break;\n\n      case 'popover':\n        var popover = overlay.querySelector('ion-select-popover');\n\n        if (popover) {\n          popover.options = this.createPopoverOptions(this.childOpts);\n        }\n\n        break;\n\n      default:\n        var inputType = this.multiple ? 'checkbox' : 'radio';\n        overlay.inputs = this.createAlertInputs(this.childOpts, inputType);\n        break;\n    }\n  };\n\n  Select.prototype.createActionSheetButtons = function (data) {\n    var _this = this;\n\n    var actionSheetButtons = data.map(function (option) {\n      return {\n        role: option.selected ? 'selected' : '',\n        text: option.textContent,\n        handler: function handler() {\n          _this.value = option.value;\n        }\n      };\n    }); // Add \"cancel\" button\n\n    actionSheetButtons.push({\n      text: this.cancelText,\n      role: 'cancel',\n      handler: function handler() {\n        _this.ionCancel.emit();\n      }\n    });\n    return actionSheetButtons;\n  };\n\n  Select.prototype.createAlertInputs = function (data, inputType) {\n    return data.map(function (o) {\n      return {\n        type: inputType,\n        label: o.textContent,\n        value: o.value,\n        checked: o.selected,\n        disabled: o.disabled\n      };\n    });\n  };\n\n  Select.prototype.createPopoverOptions = function (data) {\n    var _this = this;\n\n    return data.map(function (o) {\n      return {\n        text: o.textContent,\n        value: o.value,\n        checked: o.selected,\n        disabled: o.disabled,\n        handler: function handler() {\n          _this.value = o.value;\n\n          _this.close();\n        }\n      };\n    });\n  };\n\n  Select.prototype.openPopover = function (ev) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var interfaceOptions, mode, popoverOpts;\n      return tslib_1.__generator(this, function (_a) {\n        interfaceOptions = this.interfaceOptions;\n        mode = getIonMode(this);\n        popoverOpts = Object.assign({\n          mode: mode\n        }, interfaceOptions, {\n          component: 'ion-select-popover',\n          cssClass: ['select-popover', interfaceOptions.cssClass],\n          event: ev,\n          componentProps: {\n            header: interfaceOptions.header,\n            subHeader: interfaceOptions.subHeader,\n            message: interfaceOptions.message,\n            value: this.value,\n            options: this.createPopoverOptions(this.childOpts)\n          }\n        });\n        return [2\n        /*return*/\n        , popoverController.create(popoverOpts)];\n      });\n    });\n  };\n\n  Select.prototype.openActionSheet = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var mode, interfaceOptions, actionSheetOpts;\n      return tslib_1.__generator(this, function (_a) {\n        mode = getIonMode(this);\n        interfaceOptions = this.interfaceOptions;\n        actionSheetOpts = Object.assign({\n          mode: mode\n        }, interfaceOptions, {\n          buttons: this.createActionSheetButtons(this.childOpts),\n          cssClass: ['select-action-sheet', interfaceOptions.cssClass]\n        });\n        return [2\n        /*return*/\n        , actionSheetController.create(actionSheetOpts)];\n      });\n    });\n  };\n\n  Select.prototype.openAlert = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var label, labelText, interfaceOptions, inputType, mode, alertOpts;\n\n      var _this = this;\n\n      return tslib_1.__generator(this, function (_a) {\n        label = this.getLabel();\n        labelText = label ? label.textContent : null;\n        interfaceOptions = this.interfaceOptions;\n        inputType = this.multiple ? 'checkbox' : 'radio';\n        mode = getIonMode(this);\n        alertOpts = Object.assign({\n          mode: mode\n        }, interfaceOptions, {\n          header: interfaceOptions.header ? interfaceOptions.header : labelText,\n          inputs: this.createAlertInputs(this.childOpts, inputType),\n          buttons: [{\n            text: this.cancelText,\n            role: 'cancel',\n            handler: function handler() {\n              _this.ionCancel.emit();\n            }\n          }, {\n            text: this.okText,\n            handler: function handler(selectedValues) {\n              _this.value = selectedValues;\n            }\n          }],\n          cssClass: ['select-alert', interfaceOptions.cssClass, this.multiple ? 'multiple-select-alert' : 'single-select-alert']\n        });\n        return [2\n        /*return*/\n        , alertController.create(alertOpts)];\n      });\n    });\n  };\n  /**\n   * Close the select interface.\n   */\n\n\n  Select.prototype.close = function () {\n    // TODO check !this.overlay || !this.isFocus()\n    if (!this.overlay) {\n      return Promise.resolve(false);\n    }\n\n    return this.overlay.dismiss();\n  };\n\n  Select.prototype.loadOptions = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , Promise.all(Array.from(this.el.querySelectorAll('ion-select-option')).map(function (o) {\n              return o.componentOnReady();\n            }))];\n\n          case 1:\n            _a.childOpts = _b.sent();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Select.prototype.updateOptions = function () {\n    // iterate all options, updating the selected prop\n    var canSelect = true;\n\n    for (var _i = 0, _a = this.childOpts; _i < _a.length; _i++) {\n      var selectOption = _a[_i];\n      var selected = canSelect && isOptionSelected(this.value, selectOption.value, this.compareWith);\n      selectOption.selected = selected; // if current option is selected and select is single-option, we can't select\n      // any option more\n\n      if (selected && !this.multiple) {\n        canSelect = false;\n      }\n    }\n  };\n\n  Select.prototype.getLabel = function () {\n    return findItemLabel(this.el);\n  };\n\n  Select.prototype.hasValue = function () {\n    return this.getText() !== '';\n  };\n\n  Select.prototype.getText = function () {\n    var selectedText = this.selectedText;\n\n    if (selectedText != null && selectedText !== '') {\n      return selectedText;\n    }\n\n    return generateText(this.childOpts, this.value, this.compareWith);\n  };\n\n  Select.prototype.setFocus = function () {\n    if (this.buttonEl) {\n      this.buttonEl.focus();\n    }\n  };\n\n  Select.prototype.emitStyle = function () {\n    this.ionStyle.emit({\n      'interactive': true,\n      'select': true,\n      'has-placeholder': this.placeholder != null,\n      'has-value': this.hasValue(),\n      'interactive-disabled': this.disabled,\n      'select-disabled': this.disabled\n    });\n  };\n\n  Select.prototype.render = function () {\n    var _a;\n\n    var _this = this;\n\n    var _b = this,\n        placeholder = _b.placeholder,\n        name = _b.name,\n        disabled = _b.disabled,\n        isExpanded = _b.isExpanded,\n        value = _b.value,\n        el = _b.el;\n\n    var mode = getIonMode(this);\n    var labelId = this.inputId + '-lbl';\n    var label = findItemLabel(el);\n\n    if (label) {\n      label.id = labelId;\n    }\n\n    var addPlaceholderClass = false;\n    var selectText = this.getText();\n\n    if (selectText === '' && placeholder != null) {\n      selectText = placeholder;\n      addPlaceholderClass = true;\n    }\n\n    renderHiddenInput(true, el, name, parseValue(value), disabled);\n    var selectTextClasses = {\n      'select-text': true,\n      'select-placeholder': addPlaceholderClass\n    };\n    return h(Host, {\n      onClick: this.onClick,\n      role: \"combobox\",\n      \"aria-haspopup\": \"dialog\",\n      \"aria-disabled\": disabled ? 'true' : null,\n      \"aria-expanded\": \"\" + isExpanded,\n      \"aria-labelledby\": labelId,\n      class: (_a = {}, _a[mode] = true, _a['in-item'] = hostContext('ion-item', el), _a['select-disabled'] = disabled, _a)\n    }, h(\"div\", {\n      class: selectTextClasses\n    }, selectText), h(\"div\", {\n      class: \"select-icon\",\n      role: \"presentation\"\n    }, h(\"div\", {\n      class: \"select-icon-inner\"\n    })), h(\"button\", {\n      type: \"button\",\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      disabled: disabled,\n      ref: function ref(btnEl) {\n        return _this.buttonEl = btnEl;\n      }\n    }));\n  };\n\n  Object.defineProperty(Select.prototype, \"el\", {\n    get: function get() {\n      return getElement(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Select, \"watchers\", {\n    get: function get() {\n      return {\n        \"disabled\": [\"disabledChanged\"],\n        \"value\": [\"valueChanged\"]\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Select, \"style\", {\n    get: function get() {\n      return \":host{padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;position:relative;font-family:var(--ion-font-family,inherit);overflow:hidden;z-index:2}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}:host(.in-item){position:static;max-width:45%}:host(.select-disabled){opacity:.4;pointer-events:none}:host(.ion-focused) button{border:2px solid #5e9ed6}.select-placeholder{color:currentColor;opacity:.33}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}:host-context([dir=rtl]) button,[dir=rtl] button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.select-icon{position:relative}.select-text{-ms-flex:1;flex:1;min-width:16px;font-size:inherit;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.select-icon-inner{left:5px;top:50%;margin-top:-3px;position:absolute;width:0;height:0;border-top:5px solid;border-right:5px solid transparent;border-left:5px solid transparent;color:currentColor;opacity:.33;pointer-events:none}:host-context([dir=rtl]) .select-icon-inner,[dir=rtl] .select-icon-inner{left:unset;right:unset;right:5px}:host{--padding-top:10px;--padding-end:0;--padding-bottom:11px;--padding-start:16px}.select-icon{width:19px;height:19px}\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Select;\n}();\n\nvar parseValue = function parseValue(value) {\n  if (value == null) {\n    return undefined;\n  }\n\n  if (Array.isArray(value)) {\n    return value.join(',');\n  }\n\n  return value.toString();\n};\n\nvar isOptionSelected = function isOptionSelected(currentValue, compareValue, compareWith) {\n  if (currentValue === undefined) {\n    return false;\n  }\n\n  if (Array.isArray(currentValue)) {\n    return currentValue.some(function (val) {\n      return compareOptions(val, compareValue, compareWith);\n    });\n  } else {\n    return compareOptions(currentValue, compareValue, compareWith);\n  }\n};\n\nvar compareOptions = function compareOptions(currentValue, compareValue, compareWith) {\n  if (typeof compareWith === 'function') {\n    return compareWith(currentValue, compareValue);\n  } else if (typeof compareWith === 'string') {\n    return currentValue[compareWith] === compareValue[compareWith];\n  } else {\n    return currentValue === compareValue;\n  }\n};\n\nvar generateText = function generateText(opts, value, compareWith) {\n  if (value === undefined) {\n    return '';\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(function (v) {\n      return textForValue(opts, v, compareWith);\n    }).filter(function (opt) {\n      return opt !== null;\n    }).join(', ');\n  } else {\n    return textForValue(opts, value, compareWith) || '';\n  }\n};\n\nvar textForValue = function textForValue(opts, value, compareWith) {\n  var selectOpt = opts.find(function (opt) {\n    return compareOptions(opt.value, value, compareWith);\n  });\n  return selectOpt ? selectOpt.textContent : null;\n};\n\nvar selectIds = 0;\n\nvar SelectOption =\n/** @class */\nfunction () {\n  function SelectOption(hostRef) {\n    registerInstance(this, hostRef);\n    this.inputId = \"ion-selopt-\" + selectOptionIds++;\n    /**\n     * If `true`, the user cannot interact with the select option.\n     */\n\n    this.disabled = false;\n    /**\n     * If `true`, the element is selected.\n     */\n\n    this.selected = false;\n    this.ionSelectOptionDidLoad = createEvent(this, \"ionSelectOptionDidLoad\", 7);\n    this.ionSelectOptionDidUnload = createEvent(this, \"ionSelectOptionDidUnload\", 7);\n  }\n\n  SelectOption.prototype.componentWillLoad = function () {\n    if (this.value === undefined) {\n      this.value = this.el.textContent || '';\n    }\n  };\n\n  SelectOption.prototype.componentDidLoad = function () {\n    this.ionSelectOptionDidLoad.emit();\n  };\n\n  SelectOption.prototype.componentDidUnload = function () {\n    this.ionSelectOptionDidUnload.emit();\n  };\n\n  SelectOption.prototype.render = function () {\n    return h(Host, {\n      role: \"option\",\n      id: this.inputId,\n      class: getIonMode(this)\n    });\n  };\n\n  Object.defineProperty(SelectOption.prototype, \"el\", {\n    get: function get() {\n      return getElement(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectOption, \"style\", {\n    get: function get() {\n      return \":host{display:none}\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return SelectOption;\n}();\n\nvar selectOptionIds = 0;\n/**\n * @internal\n */\n\nvar SelectPopover =\n/** @class */\nfunction () {\n  function SelectPopover(hostRef) {\n    registerInstance(this, hostRef);\n    /** Array of options for the popover */\n\n    this.options = [];\n  }\n\n  SelectPopover.prototype.onSelect = function (ev) {\n    var option = this.options.find(function (o) {\n      return o.value === ev.target.value;\n    });\n\n    if (option) {\n      safeCall(option.handler);\n    }\n  };\n\n  SelectPopover.prototype.render = function () {\n    return h(Host, {\n      class: getIonMode(this)\n    }, h(\"ion-list\", null, this.header !== undefined && h(\"ion-list-header\", null, this.header), (this.subHeader !== undefined || this.message !== undefined) && h(\"ion-item\", null, h(\"ion-label\", {\n      \"text-wrap\": true\n    }, this.subHeader !== undefined && h(\"h3\", null, this.subHeader), this.message !== undefined && h(\"p\", null, this.message))), h(\"ion-radio-group\", null, this.options.map(function (option) {\n      return h(\"ion-item\", null, h(\"ion-label\", null, option.text), h(\"ion-radio\", {\n        checked: option.checked,\n        value: option.value,\n        disabled: option.disabled\n      }));\n    }))));\n  };\n\n  Object.defineProperty(SelectPopover, \"style\", {\n    get: function get() {\n      return \".sc-ion-select-popover-h ion-list.sc-ion-select-popover{margin-left:0;margin-right:0;margin-top:-1px;margin-bottom:-1px}.sc-ion-select-popover-h ion-label.sc-ion-select-popover, .sc-ion-select-popover-h ion-list-header.sc-ion-select-popover{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return SelectPopover;\n}();\n\nexport { Select as ion_select, SelectOption as ion_select_option, SelectPopover as ion_select_popover };","map":null,"metadata":{},"sourceType":"module"}